{% extends "base.twig" %}

{% block title %}Tickets - TicketApp{% endblock %}

{% set current_route = '/app/tickets' %}

{% block content %}
<div class="w-full max-w-1440 mx-auto px-6 md:px-8 py-10 text-left text-white">
    <!-- PAGE HEADER -->
    <div class="flex flex-col md:flex-row md:items-center md:justify-between gap-4 mb-8">
        <div>
            <h1 class="text-2xl font-semibold text-white">Tickets</h1>
            <p class="text-sm text-gray-400">
                Create, edit, resolve, and track all support tickets here.
            </p>
        </div>
        <button id="cancel-edit-btn" class="hidden text-xs font-medium bg-gray-700 hover:bg-gray-600 text-white rounded-lg px-3 py-2">
            Cancel edit
        </button>
    </div>

    <!-- CREATE / EDIT FORM -->
    <div class="bg-card-dark border border-brand-blue rounded-xl shadow-[0_30px_80px_rgba(80,80,255,0.15)] p-6 max-w-xl">
        <h2 id="form-title" class="text-lg font-medium text-white mb-4">New Ticket</h2>

        <!-- Feedback messages -->
        <div id="error-message" class="hidden mb-4 text-sm text-red-400 bg-red-900/20 border border-red-500/40 rounded-lg px-3 py-2"></div>
        <div id="success-message" class="hidden mb-4 text-sm text-green-400 bg-green-900/20 border border-green-500/40 rounded-lg px-3 py-2"></div>

        <form id="ticket-form" class="flex flex-col gap-4">
            <input type="hidden" id="ticket-id" name="id" value="">
            
            <!-- Title (REQUIRED) -->
            <div class="flex flex-col gap-2">
                <label class="text-xs text-gray-300" for="title">
                    Title <span class="text-red-400">*</span>
                </label>
                <input
                    id="title"
                    name="title"
                    class="bg-input-dark border border-gray-600 text-white text-sm rounded-lg px-3 py-2 outline-none focus:ring-2 focus:ring-brand-blue"
                    placeholder="Cannot login / App is crashing / etc..."
                    maxlength="100"
                />
                <div id="title-error" class="text-xs text-red-400 hidden"></div>
            </div>

            <!-- Description (OPTIONAL BUT WE VALIDATE LENGTH) -->
            <div class="flex flex-col gap-2">
                <label class="text-xs text-gray-300" for="description">
                    Description
                </label>
                <textarea
                    id="description"
                    name="description"
                    rows="3"
                    maxlength="200"
                    class="bg-input-dark border border-gray-600 text-white text-sm rounded-lg px-3 py-2 outline-none focus:ring-2 focus:ring-brand-blue resize-none"
                    placeholder="Extra details for context (optional, 200 chars max)"
                ></textarea>
                <div class="text-[10px] text-gray-500 text-right">
                    <span id="char-count">0</span>/200
                </div>
                <div id="description-error" class="text-xs text-red-400 hidden"></div>
            </div>

            <!-- Status (REQUIRED AND LIMITED CHOICES) -->
            <div class="flex flex-col gap-2">
                <label class="text-xs text-gray-300" for="status">
                    Status <span class="text-red-400">*</span>
                </label>
                <select
                    id="status"
                    name="status"
                    class="bg-input-dark border border-gray-600 text-white text-sm rounded-lg px-3 py-2 outline-none focus:ring-2 focus:ring-brand-blue"
                >
                    <option value="open">open</option>
                    <option value="in_progress">in_progress</option>
                    <option value="closed">closed</option>
                </select>
                <p class="text-[10px] text-gray-500">
                    Only "open", "in_progress", or "closed" are allowed.
                </p>
            </div>

            <button
                type="submit"
                id="submit-btn"
                class="text-sm font-medium bg-brand-blue bg-brand-blue-hover text-white rounded-lg px-4 py-2 shadow-brand-blue disabled:opacity-50"
            >
                <span id="submit-text">Create Ticket</span>
                <span id="submit-loading" class="hidden">Processing...</span>
            </button>
        </form>
    </div>

    <!-- DELETE CONFIRMATION -->
    <div id="delete-modal" class="hidden mt-6 max-w-xl bg-[#2d0f14] border border-red-500/40 rounded-xl p-4 text-sm">
        <p class="text-red-300 font-medium mb-3">
            Are you sure you want to delete this ticket? This cannot be undone.
        </p>
        <div class="flex gap-3">
            <button id="confirm-delete-btn" class="bg-red-600 hover:bg-red-700 text-white text-xs font-medium rounded-lg px-3 py-2">
                Yes, delete it
            </button>
            <button id="cancel-delete-btn" class="bg-gray-700 hover:bg-gray-600 text-white text-xs font-medium rounded-lg px-3 py-2">
                Cancel
            </button>
        </div>
    </div>

    <!-- TICKET LIST -->
    <div class="mt-10">
        <h2 class="text-lg font-medium text-white mb-4">All Tickets</h2>

        <div id="tickets-container">
            {% if tickets|length == 0 %}
            <div class="text-sm text-gray-500 bg-input-dark border border-gray-700 rounded-lg px-4 py-6 max-w-xl">
                <p class="text-center">
                    No tickets yet. Create your first ticket above.
                </p>
            </div>
            {% else %}
            <div class="grid gap-4 md:grid-cols-2 lg:grid-cols-3" id="tickets-grid">
                {% for ticket in tickets %}
                <div class="ticket-card bg-card-dark border border-gray-700 rounded-xl shadow-[0_20px_60px_rgba(0,0,0,0.6)] p-5 flex flex-col justify-between" data-id="{{ ticket.id }}">
                    <div>
                        <div class="flex items-start justify-between gap-3">
                            <h3 class="text-white font-semibold text-base leading-snug break-words">
                                {{ ticket.title }}
                            </h3>

                            <!-- STATUS BADGE -->
                            <span class="status-badge text-[10px] font-medium rounded-md px-2 py-1 leading-none whitespace-nowrap {{ ticket.status == 'open' ? 'bg-green-500/20 text-green-300 border border-green-500/40' : (ticket.status == 'in_progress' ? 'bg-amber-500/20 text-amber-300 border border-amber-500/40' : 'bg-gray-500/20 text-gray-300 border border-gray-500/40') }}">
                                {{ ticket.status }}
                            </span>
                        </div>

                        {% if ticket.description %}
                        <p class="text-gray-400 text-xs mt-3 leading-relaxed break-words">
                            {{ ticket.description }}
                        </p>
                        {% endif %}

                        <p class="text-[10px] text-gray-600 mt-3">
                            Created: {{ ticket.created_at|date('M j, Y g:i A') }}
                        </p>
                    </div>

                    <div class="flex flex-wrap gap-2 mt-4">
                        <button onclick="editTicket('{{ ticket.id }}')" class="bg-gray-700 hover:bg-gray-600 text-white text-[11px] font-medium rounded-lg px-3 py-1.5">
                            Edit
                        </button>
                        <button onclick="askDeleteTicket('{{ ticket.id }}')" class="bg-red-600 hover:bg-red-700 text-white text-[11px] font-medium rounded-lg px-3 py-1.5">
                            Delete
                        </button>
                    </div>
                </div>
                {% endfor %}
            </div>
            {% endif %}
        </div>
    </div>
</div>
{% endblock %}

{% block scripts %}
<script>
let tickets = {{ tickets|json_encode|raw }};
let editingId = null;
let deletingId = null;

document.addEventListener('DOMContentLoaded', function() {
    const form = document.getElementById('ticket-form');
    const titleInput = document.getElementById('title');
    const descriptionInput = document.getElementById('description');
    const statusSelect = document.getElementById('status');
    const charCount = document.getElementById('char-count');
    const errorDiv = document.getElementById('error-message');
    const successDiv = document.getElementById('success-message');

    // Character counter for description
    descriptionInput.addEventListener('input', function() {
        charCount.textContent = this.value.length;
        clearMessages();
    });

    // Clear messages on input
    [titleInput, descriptionInput, statusSelect].forEach(input => {
        input.addEventListener('input', clearMessages);
    });

    // Form submission
    form.addEventListener('submit', function(e) {
        e.preventDefault();
        
        if (!validateForm()) {
            return;
        }

        const formData = {
            title: titleInput.value.trim(),
            description: descriptionInput.value.trim(),
            status: statusSelect.value
        };

        if (editingId) {
            formData.id = editingId;
            updateTicket(formData);
        } else {
            createTicket(formData);
        }
    });

    // Cancel edit button
    document.getElementById('cancel-edit-btn').addEventListener('click', function() {
        cancelEdit();
    });

    // Delete modal buttons
    document.getElementById('confirm-delete-btn').addEventListener('click', function() {
        confirmDelete();
    });

    document.getElementById('cancel-delete-btn').addEventListener('click', function() {
        cancelDelete();
    });

    function validateForm() {
        clearFieldErrors();
        let isValid = true;

        const title = titleInput.value.trim();
        const description = descriptionInput.value.trim();
        const status = statusSelect.value;

        if (!title) {
            showFieldError('title', 'Title is required.');
            isValid = false;
        }

        if (description.length > 200) {
            showFieldError('description', 'Description cannot exceed 200 characters.');
            isValid = false;
        }

        if (!['open', 'in_progress', 'closed'].includes(status)) {
            showError('Invalid status selected.');
            isValid = false;
        }

        return isValid;
    }

    function showFieldError(field, message) {
        const errorElement = document.getElementById(field + '-error');
        errorElement.textContent = message;
        errorElement.classList.remove('hidden');
    }

    function clearFieldErrors() {
        ['title', 'description'].forEach(field => {
            document.getElementById(field + '-error').classList.add('hidden');
        });
    }

    function clearMessages() {
        errorDiv.classList.add('hidden');
        successDiv.classList.add('hidden');
        clearFieldErrors();
    }

    function showError(message) {
        errorDiv.textContent = message;
        errorDiv.classList.remove('hidden');
        successDiv.classList.add('hidden');
    }

    function showSuccess(message) {
        successDiv.textContent = message;
        successDiv.classList.remove('hidden');
        errorDiv.classList.add('hidden');
    }

    function setLoading(loading) {
        const submitBtn = document.getElementById('submit-btn');
        const submitText = document.getElementById('submit-text');
        const submitLoading = document.getElementById('submit-loading');

        submitBtn.disabled = loading;
        if (loading) {
            submitText.classList.add('hidden');
            submitLoading.classList.remove('hidden');
        } else {
            submitText.classList.remove('hidden');
            submitLoading.classList.add('hidden');
        }
    }

    function resetForm() {
        form.reset();
        editingId = null;
        document.getElementById('ticket-id').value = '';
        document.getElementById('form-title').textContent = 'New Ticket';
        document.getElementById('submit-text').textContent = 'Create Ticket';
        document.getElementById('cancel-edit-btn').classList.add('hidden');
        charCount.textContent = '0';
        clearMessages();
    }

    // Global functions for ticket operations
    window.editTicket = function(id) {
        const ticket = tickets.find(t => t.id === id);
        if (!ticket) return;

        editingId = id;
        document.getElementById('ticket-id').value = id;
        titleInput.value = ticket.title;
        descriptionInput.value = ticket.description || '';
        statusSelect.value = ticket.status;
        
        document.getElementById('form-title').textContent = 'Update Ticket';
        document.getElementById('submit-text').textContent = 'Save Changes';
        document.getElementById('cancel-edit-btn').classList.remove('hidden');
        
        charCount.textContent = (ticket.description || '').length;
        clearMessages();

        // Scroll to form
        document.getElementById('ticket-form').scrollIntoView({ behavior: 'smooth', block: 'start' });
    };

    window.cancelEdit = function() {
        resetForm();
    };

    window.askDeleteTicket = function(id) {
        deletingId = id;
        document.getElementById('delete-modal').classList.remove('hidden');
    };

    window.cancelDelete = function() {
        deletingId = null;
        document.getElementById('delete-modal').classList.add('hidden');
    };

    window.confirmDelete = function() {
        if (!deletingId) return;

        deleteTicket(deletingId)
            .then(data => {
                if (data.success) {
                    // Remove from local array
                    tickets = tickets.filter(t => t.id !== deletingId);
                    
                    // Remove from DOM
                    const ticketCard = document.querySelector(`[data-id="${deletingId}"]`);
                    if (ticketCard) {
                        ticketCard.remove();
                    }
                    
                    // Check if list is empty
                    if (tickets.length === 0) {
                        document.getElementById('tickets-container').innerHTML = `
                            <div class="text-sm text-gray-500 bg-input-dark border border-gray-700 rounded-lg px-4 py-6 max-w-xl">
                                <p class="text-center">No tickets yet. Create your first ticket above.</p>
                            </div>
                        `;
                    }
                    
                    showSuccess(data.message);
                    showToast(data.message, 'success');
                } else {
                    showError(data.message);
                    showToast(data.message, 'error');
                }
                cancelDelete();
            })
            .catch(error => {
                showError('Failed to delete ticket. Please try again.');
                showToast('Failed to delete ticket.', 'error');
                cancelDelete();
            });
    };

    function createTicket(data) {
        setLoading(true);
        
        window.createTicket(data)
            .then(result => {
                if (result.success) {
                    // Add to local array
                    tickets.unshift(result.ticket);
                    
                    // Add to DOM
                    addTicketToDOM(result.ticket);
                    
                    showSuccess(result.message);
                    showToast(result.message, 'success');
                    resetForm();
                } else {
                    showError(result.message);
                    showToast(result.message, 'error');
                }
            })
            .catch(error => {
                showError('Failed to create ticket. Please try again.');
                showToast('Failed to create ticket.', 'error');
            })
            .finally(() => {
                setLoading(false);
            });
    }

    function updateTicket(data) {
        setLoading(true);
        
        window.updateTicket(data)
            .then(result => {
                if (result.success) {
                    // Update local array
                    const index = tickets.findIndex(t => t.id === editingId);
                    if (index !== -1) {
                        tickets[index] = result.ticket;
                    }
                    
                    // Update DOM
                    updateTicketInDOM(result.ticket);
                    
                    showSuccess(result.message);
                    showToast(result.message, 'success');
                    resetForm();
                } else {
                    showError(result.message);
                    showToast(result.message, 'error');
                }
            })
            .catch(error => {
                showError('Failed to update ticket. Please try again.');
                showToast('Failed to update ticket.', 'error');
            })
            .finally(() => {
                setLoading(false);
            });
    }

    function addTicketToDOM(ticket) {
        const container = document.getElementById('tickets-container');
        
        // Remove "no tickets" message if present
        const noTicketsMsg = container.querySelector('.text-center');
        if (noTicketsMsg) {
            container.innerHTML = '<div class="grid gap-4 md:grid-cols-2 lg:grid-cols-3" id="tickets-grid"></div>';
        }
        
        const grid = document.getElementById('tickets-grid');
        const ticketHTML = createTicketHTML(ticket);
        grid.insertAdjacentHTML('afterbegin', ticketHTML);
    }

    function updateTicketInDOM(ticket) {
        const ticketCard = document.querySelector(`[data-id="${ticket.id}"]`);
        if (ticketCard) {
            const newHTML = createTicketHTML(ticket);
            const tempDiv = document.createElement('div');
            tempDiv.innerHTML = newHTML;
            ticketCard.replaceWith(tempDiv.firstElementChild);
        }
    }

    function createTicketHTML(ticket) {
        const statusClass = getStatusClass(ticket.status);
        const createdAt = new Date(ticket.created_at).toLocaleDateString('en-US', {
            month: 'short',
            day: 'numeric',
            year: 'numeric',
            hour: 'numeric',
            minute: '2-digit'
        });

        return `
            <div class="ticket-card bg-card-dark border border-gray-700 rounded-xl shadow-[0_20px_60px_rgba(0,0,0,0.6)] p-5 flex flex-col justify-between" data-id="${ticket.id}">
                <div>
                    <div class="flex items-start justify-between gap-3">
                        <h3 class="text-white font-semibold text-base leading-snug break-words">
                            ${ticket.title}
                        </h3>
                        <span class="status-badge text-[10px] font-medium rounded-md px-2 py-1 leading-none whitespace-nowrap ${statusClass}">
                            ${ticket.status}
                        </span>
                    </div>
                    ${ticket.description ? `<p class="text-gray-400 text-xs mt-3 leading-relaxed break-words">${ticket.description}</p>` : ''}
                    <p class="text-[10px] text-gray-600 mt-3">
                        Created: ${createdAt}
                    </p>
                </div>
                <div class="flex flex-wrap gap-2 mt-4">
                    <button onclick="editTicket('${ticket.id}')" class="bg-gray-700 hover:bg-gray-600 text-white text-[11px] font-medium rounded-lg px-3 py-1.5">
                        Edit
                    </button>
                    <button onclick="askDeleteTicket('${ticket.id}')" class="bg-red-600 hover:bg-red-700 text-white text-[11px] font-medium rounded-lg px-3 py-1.5">
                        Delete
                    </button>
                </div>
            </div>
        `;
    }

    function getStatusClass(status) {
        switch (status) {
            case 'open':
                return 'bg-green-500/20 text-green-300 border border-green-500/40';
            case 'in_progress':
                return 'bg-amber-500/20 text-amber-300 border border-amber-500/40';
            case 'closed':
                return 'bg-gray-500/20 text-gray-300 border border-gray-500/40';
            default:
                return 'bg-gray-500/20 text-gray-300 border border-gray-500/40';
        }
    }
});
</script>
{% endblock %}